{"/home/travis/build/npmtest/node-npmtest-nativefier/test.js":"/* istanbul instrument in package npmtest_nativefier */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nativefier/lib.npmtest_nativefier.js":"/* istanbul instrument in package npmtest_nativefier */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nativefier = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nativefier = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nativefier/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nativefier && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nativefier */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nativefier\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nativefier.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_nativefier.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nativefier.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_nativefier.__dirname +\n                    '/lib.npmtest_nativefier.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nativefier/node_modules/nativefier/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nrequire('source-map-support/register');\n\nrequire('babel-polyfill');\n\nvar _buildMain = require('./build/buildMain');\n\nvar _buildMain2 = _interopRequireDefault(_buildMain);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _buildMain2.default;\n//# sourceMappingURL=index.js.map\n","/home/travis/build/npmtest/node-npmtest-nativefier/node_modules/nativefier/lib/build/buildMain.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _electronPackager = require('electron-packager');\n\nvar _electronPackager2 = _interopRequireDefault(_electronPackager);\n\nvar _tmp = require('tmp');\n\nvar _tmp2 = _interopRequireDefault(_tmp);\n\nvar _ncp = require('ncp');\n\nvar _ncp2 = _interopRequireDefault(_ncp);\n\nvar _async = require('async');\n\nvar _async2 = _interopRequireDefault(_async);\n\nvar _hasbin = require('hasbin');\n\nvar _hasbin2 = _interopRequireDefault(_hasbin);\n\nvar _loglevel = require('loglevel');\n\nvar _loglevel2 = _interopRequireDefault(_loglevel);\n\nvar _dishonestProgress = require('./../helpers/dishonestProgress');\n\nvar _dishonestProgress2 = _interopRequireDefault(_dishonestProgress);\n\nvar _optionsMain = require('./../options/optionsMain');\n\nvar _optionsMain2 = _interopRequireDefault(_optionsMain);\n\nvar _iconBuild = require('./iconBuild');\n\nvar _iconBuild2 = _interopRequireDefault(_iconBuild);\n\nvar _helpers = require('./../helpers/helpers');\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nvar _packagerConsole = require('./../helpers/packagerConsole');\n\nvar _packagerConsole2 = _interopRequireDefault(_packagerConsole);\n\nvar _buildApp = require('./buildApp');\n\nvar _buildApp2 = _interopRequireDefault(_buildApp);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar copy = _ncp2.default.ncp;\nvar isWindows = _helpers2.default.isWindows;\n\n/**\n * @callback buildAppCallback\n * @param error\n * @param {string} appPath\n */\n\n/**\n *\n * @param {{}} options\n * @param {buildAppCallback} callback\n */\nfunction buildMain(options, callback) {\n    // pre process app\n\n    var tmpObj = _tmp2.default.dirSync({ unsafeCleanup: true });\n    var tmpPath = tmpObj.name;\n\n    // todo check if this is still needed on later version of packager\n    var packagerConsole = new _packagerConsole2.default();\n\n    var progress = new _dishonestProgress2.default(5);\n\n    _async2.default.waterfall([function (callback) {\n        progress.tick('inferring');\n        (0, _optionsMain2.default)(options, callback);\n    }, function (options, callback) {\n        progress.tick('copying');\n        (0, _buildApp2.default)(options.dir, tmpPath, options, function (error) {\n            if (error) {\n                callback(error);\n                return;\n            }\n            // dir now correctly references the app folder to package\n            options.dir = tmpPath;\n            callback(null, options);\n        });\n    }, function (options, callback) {\n        progress.tick('icons');\n        (0, _iconBuild2.default)(options, function (error, optionsWithIcon) {\n            callback(null, optionsWithIcon);\n        });\n    }, function (options, callback) {\n        progress.tick('packaging');\n        // maybe skip passing icon parameter to electron packager\n        var packageOptions = maybeNoIconOption(options);\n\n        packagerConsole.override();\n\n        (0, _electronPackager2.default)(packageOptions, function (error, appPathArray) {\n\n            // restore console.error\n            packagerConsole.restore();\n\n            // pass options which still contains the icon to waterfall\n            callback(error, options, appPathArray);\n        });\n    }, function (options, appPathArray, callback) {\n        progress.tick('finalizing');\n        // somehow appPathArray is a 1 element array\n        var appPath = getAppPath(appPathArray);\n        if (!appPath) {\n            callback();\n            return;\n        }\n\n        maybeCopyIcons(options, appPath, function (error) {\n            callback(error, appPath);\n        });\n    }], function (error, appPath) {\n        packagerConsole.playback();\n        callback(error, appPath);\n    });\n}\n\n/**\n * Checks the app path array to determine if the packaging was completed successfully\n * @param appPathArray Result from electron-packager\n * @returns {*}\n */\nfunction getAppPath(appPathArray) {\n    if (appPathArray.length === 0) {\n        // directory already exists, --overwrite is not set\n        // exit here\n        return null;\n    }\n\n    if (appPathArray.length > 1) {\n        _loglevel2.default.warn('Warning: This should not be happening, packaged app path contains more than one element:', appPathArray);\n    }\n\n    return appPathArray[0];\n}\n\n/**\n * Removes the `icon` parameter from options if building for Windows while not on Windows and Wine is not installed\n * @param options\n */\nfunction maybeNoIconOption(options) {\n    var packageOptions = JSON.parse(JSON.stringify(options));\n    if (options.platform === 'win32' && !isWindows()) {\n        if (!_hasbin2.default.sync('wine')) {\n            _loglevel2.default.warn('Wine is required to set the icon for a Windows app when packaging on non-windows platforms');\n            packageOptions.icon = null;\n        }\n    }\n    return packageOptions;\n}\n\n/**\n * For windows and linux, we have to copy over the icon to the resources/app folder, which the\n * BrowserWindow is hard coded to read the icon from\n * @param {{}} options\n * @param {string} appPath\n * @param callback\n */\nfunction maybeCopyIcons(options, appPath, callback) {\n    if (!options.icon) {\n        callback();\n        return;\n    }\n\n    if (options.platform === 'darwin') {\n        callback();\n        return;\n    }\n\n    // windows & linux\n    // put the icon file into the app\n    var destIconPath = _path2.default.join(appPath, 'resources/app');\n    var destFileName = 'icon' + _path2.default.extname(options.icon);\n    copy(options.icon, _path2.default.join(destIconPath, destFileName), function (error) {\n        callback(error);\n    });\n}\n\nexports.default = buildMain;\n//# sourceMappingURL=buildMain.js.map\n","/home/travis/build/npmtest/node-npmtest-nativefier/node_modules/nativefier/lib/helpers/dishonestProgress.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _progress = require('progress');\n\nvar _progress2 = _interopRequireDefault(_progress);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DishonestProgress = function () {\n    function DishonestProgress(total) {\n        _classCallCheck(this, DishonestProgress);\n\n        this.tickParts = total * 10;\n\n        this.bar = new _progress2.default('  :task [:bar] :percent', {\n            complete: '=',\n            incomplete: ' ',\n            total: total * this.tickParts,\n            width: 50,\n            clear: true\n        });\n\n        this.tickingPrevious = {\n            message: '',\n            remainder: 0,\n            interval: null\n        };\n    }\n\n    _createClass(DishonestProgress, [{\n        key: 'tick',\n        value: function tick(message) {\n            var _this = this;\n\n            var _tickingPrevious = this.tickingPrevious,\n                prevRemainder = _tickingPrevious.remainder,\n                prevMessage = _tickingPrevious.message,\n                prevInterval = _tickingPrevious.interval;\n\n\n            if (prevRemainder) {\n                this.bar.tick(prevRemainder, {\n                    task: prevMessage\n                });\n                clearInterval(prevInterval);\n            }\n\n            var realRemainder = this.bar.total - this.bar.curr;\n            if (realRemainder === this.tickParts) {\n                this.bar.tick(this.tickParts, {\n                    task: message\n                });\n                return;\n            }\n\n            this.bar.tick({\n                task: message\n            });\n\n            this.tickingPrevious = {\n                message: message,\n                remainder: this.tickParts,\n                interval: null\n            };\n\n            this.tickingPrevious.remainder -= 1;\n\n            this.tickingPrevious.interval = setInterval(function () {\n                if (_this.tickingPrevious.remainder === 1) {\n                    clearInterval(_this.tickingPrevious.interval);\n                    return;\n                }\n\n                _this.bar.tick({\n                    task: message\n                });\n                _this.tickingPrevious.remainder -= 1;\n            }, 200);\n        }\n    }]);\n\n    return DishonestProgress;\n}();\n\nexports.default = DishonestProgress;\n//# sourceMappingURL=dishonestProgress.js.map\n","/home/travis/build/npmtest/node-npmtest-nativefier/node_modules/nativefier/lib/options/optionsMain.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _async = require('async');\n\nvar _async2 = _interopRequireDefault(_async);\n\nvar _loglevel = require('loglevel');\n\nvar _loglevel2 = _interopRequireDefault(_loglevel);\n\nvar _sanitizeFilename = require('sanitize-filename');\n\nvar _sanitizeFilename2 = _interopRequireDefault(_sanitizeFilename);\n\nvar _inferIcon = require('./../infer/inferIcon');\n\nvar _inferIcon2 = _interopRequireDefault(_inferIcon);\n\nvar _inferTitle = require('./../infer/inferTitle');\n\nvar _inferTitle2 = _interopRequireDefault(_inferTitle);\n\nvar _inferOs = require('./../infer/inferOs');\n\nvar _inferOs2 = _interopRequireDefault(_inferOs);\n\nvar _inferUserAgent = require('./../infer/inferUserAgent');\n\nvar _inferUserAgent2 = _interopRequireDefault(_inferUserAgent);\n\nvar _normalizeUrl = require('./normalizeUrl');\n\nvar _normalizeUrl2 = _interopRequireDefault(_normalizeUrl);\n\nvar _package = require('./../../package.json');\n\nvar _package2 = _interopRequireDefault(_package);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar inferPlatform = _inferOs2.default.inferPlatform,\n    inferArch = _inferOs2.default.inferArch;\n\n\nvar PLACEHOLDER_APP_DIR = _path2.default.join(__dirname, '../../', 'app');\nvar ELECTRON_VERSION = '1.1.3';\n\nvar DEFAULT_APP_NAME = 'APP';\n\n/**\n * @callback optionsCallback\n * @param error\n * @param options augmented options\n */\n\n/**\n * Extracts only desired keys from inpOptions and augments it with defaults\n * @param inpOptions\n * @param {optionsCallback} callback\n */\nfunction optionsFactory(inpOptions, callback) {\n\n    var options = {\n        dir: PLACEHOLDER_APP_DIR,\n        name: inpOptions.name,\n        targetUrl: (0, _normalizeUrl2.default)(inpOptions.targetUrl),\n        platform: inpOptions.platform || inferPlatform(),\n        arch: inpOptions.arch || inferArch(),\n        version: inpOptions.electronVersion || ELECTRON_VERSION,\n        nativefierVersion: _package2.default.version,\n        out: inpOptions.out || process.cwd(),\n        overwrite: inpOptions.overwrite,\n        asar: inpOptions.conceal || false,\n        icon: inpOptions.icon,\n        counter: inpOptions.counter || false,\n        width: inpOptions.width || 1280,\n        height: inpOptions.height || 800,\n        minWidth: inpOptions.minWidth,\n        minHeight: inpOptions.minHeight,\n        maxWidth: inpOptions.maxWidth,\n        maxHeight: inpOptions.maxHeight,\n        showMenuBar: inpOptions.showMenuBar || false,\n        fastQuit: inpOptions.fastQuit || false,\n        userAgent: inpOptions.userAgent,\n        ignoreCertificate: inpOptions.ignoreCertificate || false,\n        insecure: inpOptions.insecure || false,\n        flashPluginDir: inpOptions.flashPath || inpOptions.flash || null,\n        inject: inpOptions.inject || null,\n        ignore: 'src',\n        fullScreen: inpOptions.fullScreen || false,\n        maximize: inpOptions.maximize || false,\n        hideWindowFrame: inpOptions.hideWindowFrame,\n        verbose: inpOptions.verbose,\n        disableContextMenu: inpOptions.disableContextMenu,\n        disableDevTools: inpOptions.disableDevTools,\n        crashReporter: inpOptions.crashReporter,\n        // workaround for electron-packager#375\n        tmpdir: false,\n        zoom: inpOptions.zoom || 1.0,\n        internalUrls: inpOptions.internalUrls || null\n    };\n\n    if (options.verbose) {\n        _loglevel2.default.setLevel('trace');\n    } else {\n        _loglevel2.default.setLevel('error');\n    }\n\n    if (options.flashPluginDir) {\n        options.insecure = true;\n    }\n\n    if (inpOptions.honest) {\n        options.userAgent = null;\n    }\n\n    if (options.platform.toLowerCase() === 'windows') {\n        options.platform = 'win32';\n    }\n\n    if (options.platform.toLowerCase() === 'osx' || options.platform.toLowerCase() === 'mac') {\n        options.platform = 'darwin';\n    }\n\n    if (options.width > options.maxWidth) {\n        options.width = options.maxWidth;\n    }\n\n    if (options.height > options.maxHeight) {\n        options.height = options.maxHeight;\n    }\n\n    _async2.default.waterfall([function (callback) {\n        if (options.userAgent) {\n            callback();\n            return;\n        }\n        (0, _inferUserAgent2.default)(options.version, options.platform).then(function (userAgent) {\n            options.userAgent = userAgent;\n            callback();\n        }).catch(callback);\n    }, function (callback) {\n        if (options.icon) {\n            callback();\n            return;\n        }\n        (0, _inferIcon2.default)(options.targetUrl, options.platform).then(function (pngPath) {\n            options.icon = pngPath;\n            callback();\n        }).catch(function (error) {\n            _loglevel2.default.warn('Cannot automatically retrieve the app icon:', error);\n            callback();\n        });\n    }, function (callback) {\n        // length also checks if its the commanderJS function or a string\n        if (options.name && options.name.length > 0) {\n            callback();\n            return;\n        }\n\n        (0, _inferTitle2.default)(options.targetUrl, function (error, pageTitle) {\n            if (error) {\n                _loglevel2.default.warn('Unable to automatically determine app name, falling back to \\'' + DEFAULT_APP_NAME + '\\'');\n                options.name = DEFAULT_APP_NAME;\n            } else {\n                options.name = pageTitle.trim();\n            }\n            if (options.platform === 'linux') {\n                // spaces will cause problems with Ubuntu when pinned to the dock\n                options.name = _lodash2.default.kebabCase(options.name);\n            }\n            callback();\n        });\n    }], function (error) {\n        callback(error, sanitizeOptions(options));\n    });\n}\n\nfunction sanitizeFilename(str) {\n    var cleaned = (0, _sanitizeFilename2.default)(str);\n    // remove all non ascii or use default app name\n    return cleaned.replace(/[^\\x00-\\x7F]/g, '') || DEFAULT_APP_NAME;\n}\n\nfunction sanitizeOptions(options) {\n    options.name = sanitizeFilename(options.name);\n    return options;\n}\n\nexports.default = optionsFactory;\n//# sourceMappingURL=optionsMain.js.map\n","/home/travis/build/npmtest/node-npmtest-nativefier/node_modules/nativefier/lib/infer/inferIcon.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _pageIcon = require('page-icon');\n\nvar _pageIcon2 = _interopRequireDefault(_pageIcon);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _tmp = require('tmp');\n\nvar _tmp2 = _interopRequireDefault(_tmp);\n\nvar _gitcloud = require('gitcloud');\n\nvar _gitcloud2 = _interopRequireDefault(_gitcloud);\n\nvar _helpers = require('./../helpers/helpers');\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar downloadFile = _helpers2.default.downloadFile,\n    allowedIconFormats = _helpers2.default.allowedIconFormats;\n\n_tmp2.default.setGracefulCleanup();\n\nvar GITCLOUD_SPACE_DELIMITER = '-';\n\nfunction inferIconFromStore(targetUrl, platform) {\n    var allowedFormats = allowedIconFormats(platform);\n\n    return (0, _gitcloud2.default)('http://jiahaog.com/nativefier-icons/').then(function (fileIndex) {\n        var iconWithScores = mapIconWithMatchScore(fileIndex, targetUrl);\n        var maxScore = getMaxMatchScore(iconWithScores);\n\n        if (maxScore === 0) {\n            return null;\n        }\n\n        var matchingIcons = getMatchingIcons(iconWithScores, maxScore);\n\n        var matchingUrl = void 0;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = allowedFormats[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var format = _step.value;\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = matchingIcons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var icon = _step2.value;\n\n                        if (icon.ext !== format) {\n                            continue;\n                        }\n                        matchingUrl = icon.url;\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        if (!matchingUrl) {\n            return null;\n        }\n        return downloadFile(matchingUrl);\n    });\n}\n\nfunction mapIconWithMatchScore(fileIndex, targetUrl) {\n    var normalisedTargetUrl = targetUrl.toLowerCase();\n    return fileIndex.map(function (item) {\n        var itemWords = item.name.split(GITCLOUD_SPACE_DELIMITER);\n        var score = itemWords.reduce(function (currentScore, word) {\n            if (normalisedTargetUrl.includes(word)) {\n                return currentScore + 1;\n            }\n            return currentScore;\n        }, 0);\n\n        return Object.assign({}, item, { score: score });\n    });\n}\n\nfunction getMaxMatchScore(iconWithScores) {\n    return iconWithScores.reduce(function (maxScore, currentIcon) {\n        var currentScore = currentIcon.score;\n        if (currentScore > maxScore) {\n            return currentScore;\n        }\n        return maxScore;\n    }, 0);\n}\n\n/**\n * also maps ext to icon object\n */\nfunction getMatchingIcons(iconWithScores, maxScore) {\n    return iconWithScores.filter(function (item) {\n        return item.score === maxScore;\n    }).map(function (item) {\n        return Object.assign({}, item, { ext: _path2.default.extname(item.url) });\n    });\n}\n\nfunction writeFilePromise(outPath, data) {\n    return new Promise(function (resolve, reject) {\n        _fs2.default.writeFile(outPath, data, function (error) {\n            if (error) {\n                reject(error);\n                return;\n            }\n            resolve(outPath);\n        });\n    });\n}\n\nfunction inferFromPage(targetUrl, platform, outDir) {\n    var preferredExt = '.png';\n    if (platform === 'win32') {\n        preferredExt = '.ico';\n    }\n\n    // todo might want to pass list of preferences instead\n    return (0, _pageIcon2.default)(targetUrl, { ext: preferredExt }).then(function (icon) {\n        if (!icon) {\n            return null;\n        }\n\n        var outfilePath = _path2.default.join(outDir, '/icon' + icon.ext);\n        return writeFilePromise(outfilePath, icon.data);\n    });\n}\n/**\n *\n * @param {string} targetUrl\n * @param {string} platform\n * @param {string} outDir\n */\nfunction inferIconFromUrlToPath(targetUrl, platform, outDir) {\n\n    return inferIconFromStore(targetUrl, platform).then(function (icon) {\n        if (!icon) {\n            return inferFromPage(targetUrl, platform, outDir);\n        }\n\n        var outfilePath = _path2.default.join(outDir, '/icon' + icon.ext);\n        return writeFilePromise(outfilePath, icon.data);\n    });\n}\n\n/**\n * @param {string} targetUrl\n * @param {string} platform\n */\nfunction inferIcon(targetUrl, platform) {\n    var tmpObj = _tmp2.default.dirSync({ unsafeCleanup: true });\n    var tmpPath = tmpObj.name;\n    return inferIconFromUrlToPath(targetUrl, platform, tmpPath);\n}\n\nexports.default = inferIcon;\n//# sourceMappingURL=inferIcon.js.map\n","/home/travis/build/npmtest/node-npmtest-nativefier/node_modules/nativefier/lib/helpers/helpers.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _os = require('os');\n\nvar _os2 = _interopRequireDefault(_os);\n\nvar _axios = require('axios');\n\nvar _axios2 = _interopRequireDefault(_axios);\n\nvar _hasbin = require('hasbin');\n\nvar _hasbin2 = _interopRequireDefault(_hasbin);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isOSX() {\n    return _os2.default.platform() === 'darwin';\n}\n\nfunction isWindows() {\n    return _os2.default.platform() === 'win32';\n}\n\nfunction downloadFile(fileUrl) {\n    return _axios2.default.get(fileUrl, {\n        responseType: 'arraybuffer'\n    }).then(function (response) {\n        if (!response.data) {\n            return null;\n        }\n        return {\n            data: response.data,\n            ext: _path2.default.extname(fileUrl)\n        };\n    });\n}\n\nfunction allowedIconFormats(platform) {\n    var hasIdentify = _hasbin2.default.sync('identify');\n    var hasConvert = _hasbin2.default.sync('convert');\n    var hasIconUtil = _hasbin2.default.sync('iconutil');\n\n    var pngToIcns = hasConvert && hasIconUtil;\n    var pngToIco = hasConvert;\n    var icoToIcns = pngToIcns && hasIdentify;\n    var icoToPng = hasConvert;\n\n    // todo scripts for the following\n    var icnsToPng = false;\n    var icnsToIco = false;\n\n    var formats = [];\n\n    // todo shell scripting is not supported on windows, temporary override\n    if (isWindows()) {\n        switch (platform) {\n            case 'darwin':\n                formats.push('.icns');\n                break;\n            case 'linux':\n                formats.push('.png');\n                break;\n            case 'win32':\n                formats.push('.ico');\n                break;\n            default:\n                throw 'function allowedIconFormats error: Unknown platform ' + platform;\n        }\n        return formats;\n    }\n\n    switch (platform) {\n        case 'darwin':\n            formats.push('.icns');\n            if (pngToIcns) {\n                formats.push('.png');\n            }\n            if (icoToIcns) {\n                formats.push('.ico');\n            }\n            break;\n        case 'linux':\n            formats.push('.png');\n            if (icoToPng) {\n                formats.push('.ico');\n            }\n            if (icnsToPng) {\n                formats.push('.icns');\n            }\n            break;\n        case 'win32':\n            formats.push('.ico');\n            if (pngToIco) {\n                formats.push('.png');\n            }\n            if (icnsToIco) {\n                formats.push('.icns');\n            }\n            break;\n        default:\n            throw 'function allowedIconFormats error: Unknown platform ' + platform;\n    }\n    return formats;\n}\n\nexports.default = {\n    isOSX: isOSX,\n    isWindows: isWindows,\n    downloadFile: downloadFile,\n    allowedIconFormats: allowedIconFormats\n};\n//# sourceMappingURL=helpers.js.map\n","/home/travis/build/npmtest/node-npmtest-nativefier/node_modules/nativefier/lib/infer/inferTitle.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _request = require('request');\n\nvar _request2 = _interopRequireDefault(_request);\n\nvar _cheerio = require('cheerio');\n\nvar _cheerio2 = _interopRequireDefault(_cheerio);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction inferTitle(url, callback) {\n    var options = {\n        url: url,\n        headers: {\n            // fake a user agent because pages like http://messenger.com will throw 404 error\n            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36'\n        }\n    };\n\n    (0, _request2.default)(options, function (error, response, body) {\n        if (error || response.statusCode !== 200) {\n            callback('Request Error: ' + error + ', Status Code ' + (response ? response.statusCode : 'No Response'));\n            return;\n        }\n\n        var $ = _cheerio2.default.load(body);\n        var pageTitle = $('title').first().text().replace(/\\//g, '');\n        callback(null, pageTitle);\n    });\n}\n\nexports.default = inferTitle;\n//# sourceMappingURL=inferTitle.js.map\n","/home/travis/build/npmtest/node-npmtest-nativefier/node_modules/nativefier/lib/infer/inferOs.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _os = require('os');\n\nvar _os2 = _interopRequireDefault(_os);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction inferPlatform() {\n    var platform = _os2.default.platform();\n    if (platform === 'darwin' || platform === 'win32' || platform === 'linux') {\n        return platform;\n    }\n\n    throw 'Untested platform ' + platform + ' detected';\n}\n\nfunction inferArch() {\n    var arch = _os2.default.arch();\n    if (arch !== 'ia32' && arch !== 'x64') {\n        throw 'Incompatible architecture ' + arch + ' detected';\n    }\n    return arch;\n}\n\nexports.default = {\n    inferPlatform: inferPlatform,\n    inferArch: inferArch\n};\n//# sourceMappingURL=inferOs.js.map\n","/home/travis/build/npmtest/node-npmtest-nativefier/node_modules/nativefier/lib/infer/inferUserAgent.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getUserAgentString = getUserAgentString;\n\nvar _axios = require('axios');\n\nvar _axios2 = _interopRequireDefault(_axios);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _loglevel = require('loglevel');\n\nvar _loglevel2 = _interopRequireDefault(_loglevel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ELECTRON_VERSIONS_URL = 'https://atom.io/download/atom-shell/index.json';\nvar DEFAULT_CHROME_VERSION = '47.0.2526.73';\n\nfunction getChromeVersionForElectronVersion(electronVersion) {\n    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ELECTRON_VERSIONS_URL;\n\n    return _axios2.default.get(url, { timeout: 5000 }).then(function (response) {\n        if (response.status !== 200) {\n            throw 'Bad request: Status code ' + response.status;\n        }\n\n        var data = response.data;\n        var electronVersionToChromeVersion = _lodash2.default.zipObject(data.map(function (d) {\n            return d.version;\n        }), data.map(function (d) {\n            return d.chrome;\n        }));\n\n        if (!(electronVersion in electronVersionToChromeVersion)) {\n            throw 'Electron version \\'' + electronVersion + '\\' not found in retrieved version list!';\n        }\n\n        return electronVersionToChromeVersion[electronVersion];\n    });\n}\n\nfunction getUserAgentString(chromeVersion, platform) {\n    var userAgent = void 0;\n    switch (platform) {\n        case 'darwin':\n            userAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/' + chromeVersion + ' Safari/537.36';\n            break;\n        case 'win32':\n            userAgent = 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/' + chromeVersion + ' Safari/537.36';\n            break;\n        case 'linux':\n            userAgent = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/' + chromeVersion + ' Safari/537.36';\n            break;\n        default:\n            throw 'Error invalid platform specified to getUserAgentString()';\n    }\n    return userAgent;\n}\n\nfunction inferUserAgent(electronVersion, platform) {\n    var url = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ELECTRON_VERSIONS_URL;\n\n    return getChromeVersionForElectronVersion(electronVersion, url).then(function (chromeVersion) {\n        return getUserAgentString(chromeVersion, platform);\n    }).catch(function () {\n        _loglevel2.default.warn('Unable to infer chrome version for user agent, using ' + DEFAULT_CHROME_VERSION);\n        return getUserAgentString(DEFAULT_CHROME_VERSION, platform);\n    });\n}\n\nexports.default = inferUserAgent;\n//# sourceMappingURL=inferUserAgent.js.map\n","/home/travis/build/npmtest/node-npmtest-nativefier/node_modules/nativefier/lib/options/normalizeUrl.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _validator = require('validator');\n\nvar _validator2 = _interopRequireDefault(_validator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction normalizeUrl(testUrl) {\n    // add protocol if protocol not found\n    var normalized = testUrl;\n    var parsed = _url2.default.parse(normalized);\n    if (!parsed.protocol) {\n        normalized = 'http://' + normalized;\n    }\n    if (!_validator2.default.isURL(normalized, { require_protocol: true, require_tld: false })) {\n        throw 'Your Url: \"' + normalized + '\" is invalid!';\n    }\n    return normalized;\n}\n\nexports.default = normalizeUrl;\n//# sourceMappingURL=normalizeUrl.js.map\n","/home/travis/build/npmtest/node-npmtest-nativefier/node_modules/nativefier/lib/build/iconBuild.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _loglevel = require('loglevel');\n\nvar _loglevel2 = _interopRequireDefault(_loglevel);\n\nvar _helpers = require('./../helpers/helpers');\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nvar _iconShellHelpers = require('./../helpers/iconShellHelpers');\n\nvar _iconShellHelpers2 = _interopRequireDefault(_iconShellHelpers);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar isOSX = _helpers2.default.isOSX;\nvar convertToPng = _iconShellHelpers2.default.convertToPng,\n    convertToIco = _iconShellHelpers2.default.convertToIco,\n    convertToIcns = _iconShellHelpers2.default.convertToIcns;\n\n/**\n * @callback augmentIconsCallback\n * @param error\n * @param options\n */\n\n/**\n * Will check and convert a `.png` to `.icns` if necessary and augment\n * options.icon with the result\n *\n * @param options will need options.platform and options.icon\n * @param {augmentIconsCallback} callback\n */\n\nfunction iconBuild(options, callback) {\n\n    var returnCallback = function returnCallback() {\n        callback(null, options);\n    };\n\n    if (!options.icon) {\n        returnCallback();\n        return;\n    }\n\n    if (options.platform === 'win32') {\n        if (iconIsIco(options.icon)) {\n            returnCallback();\n            return;\n        }\n\n        convertToIco(options.icon).then(function (outPath) {\n            options.icon = outPath;\n            returnCallback();\n        }).catch(function (error) {\n            _loglevel2.default.warn('Skipping icon conversion to .ico', error);\n            returnCallback();\n        });\n        return;\n    }\n\n    if (options.platform === 'linux') {\n        if (iconIsPng(options.icon)) {\n            returnCallback();\n            return;\n        }\n\n        convertToPng(options.icon).then(function (outPath) {\n            options.icon = outPath;\n            returnCallback();\n        }).catch(function (error) {\n            _loglevel2.default.warn('Skipping icon conversion to .png', error);\n            returnCallback();\n        });\n        return;\n    }\n\n    if (iconIsIcns(options.icon)) {\n        returnCallback();\n        return;\n    }\n\n    if (!isOSX()) {\n        _loglevel2.default.warn('Skipping icon conversion to .icns, conversion is only supported on OSX');\n        returnCallback();\n        return;\n    }\n\n    convertToIcns(options.icon).then(function (outPath) {\n        options.icon = outPath;\n        returnCallback();\n    }).catch(function (error) {\n        _loglevel2.default.warn('Skipping icon conversion to .icns', error);\n        returnCallback();\n    });\n}\n\nfunction iconIsIco(iconPath) {\n    return _path2.default.extname(iconPath) === '.ico';\n}\n\nfunction iconIsPng(iconPath) {\n    return _path2.default.extname(iconPath) === '.png';\n}\n\nfunction iconIsIcns(iconPath) {\n    return _path2.default.extname(iconPath) === '.icns';\n}\n\nexports.default = iconBuild;\n//# sourceMappingURL=iconBuild.js.map\n","/home/travis/build/npmtest/node-npmtest-nativefier/node_modules/nativefier/lib/helpers/iconShellHelpers.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _shelljs = require('shelljs');\n\nvar _shelljs2 = _interopRequireDefault(_shelljs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _tmp = require('tmp');\n\nvar _tmp2 = _interopRequireDefault(_tmp);\n\nvar _helpers = require('./helpers');\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar isWindows = _helpers2.default.isWindows,\n    isOSX = _helpers2.default.isOSX;\n\n\n_tmp2.default.setGracefulCleanup();\n\nvar SCRIPT_PATHS = {\n    singleIco: _path2.default.join(__dirname, '../..', 'bin/singleIco'),\n    convertToPng: _path2.default.join(__dirname, '../..', 'bin/convertToPng'),\n    convertToIco: _path2.default.join(__dirname, '../..', 'bin/convertToIco'),\n    convertToIcns: _path2.default.join(__dirname, '../..', 'bin/convertToIcns')\n};\n\n/**\n * Executes a shell script with the form \"./pathToScript param1 param2\"\n * @param {string} shellScriptPath\n * @param {string} icoSrc input .ico\n * @param {string} dest has to be a .ico path\n */\nfunction iconShellHelper(shellScriptPath, icoSrc, dest) {\n    return new Promise(function (resolve, reject) {\n        if (isWindows()) {\n            reject('OSX or Linux is required');\n            return;\n        }\n\n        _shelljs2.default.exec(shellScriptPath + ' ' + icoSrc + ' ' + dest, { silent: true }, function (exitCode, stdOut, stdError) {\n            if (exitCode) {\n                reject({\n                    stdOut: stdOut,\n                    stdError: stdError\n                });\n                return;\n            }\n\n            resolve(dest);\n        });\n    });\n}\n\nfunction getTmpDirPath() {\n    var tempIconDirObj = _tmp2.default.dirSync({ unsafeCleanup: true });\n    return tempIconDirObj.name;\n}\n\n/**\n * Converts the ico to a temporary directory which will be cleaned up on process exit\n * @param {string} icoSrc path to a .ico file\n * @return {Promise}\n */\n\nfunction singleIco(icoSrc) {\n    return iconShellHelper(SCRIPT_PATHS.singleIco, icoSrc, getTmpDirPath() + '/icon.ico');\n}\n\nfunction convertToPng(icoSrc) {\n    return iconShellHelper(SCRIPT_PATHS.convertToPng, icoSrc, getTmpDirPath() + '/icon.png');\n}\n\nfunction convertToIco(icoSrc) {\n    return iconShellHelper(SCRIPT_PATHS.convertToIco, icoSrc, getTmpDirPath() + '/icon.ico');\n}\n\nfunction convertToIcns(icoSrc) {\n    if (!isOSX()) {\n        return new Promise(function (resolve, reject) {\n            return reject('OSX is required to convert to a .icns icon');\n        });\n    }\n    return iconShellHelper(SCRIPT_PATHS.convertToIcns, icoSrc, getTmpDirPath() + '/icon.icns');\n}\n\nexports.default = {\n    singleIco: singleIco,\n    convertToPng: convertToPng,\n    convertToIco: convertToIco,\n    convertToIcns: convertToIcns\n};\n//# sourceMappingURL=iconShellHelpers.js.map\n","/home/travis/build/npmtest/node-npmtest-nativefier/node_modules/nativefier/lib/helpers/packagerConsole.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PackagerConsole = function () {\n    function PackagerConsole() {\n        _classCallCheck(this, PackagerConsole);\n\n        this.logs = [];\n    }\n\n    _createClass(PackagerConsole, [{\n        key: '_log',\n        value: function _log() {\n            var _logs;\n\n            (_logs = this.logs).push.apply(_logs, arguments);\n        }\n    }, {\n        key: 'override',\n        value: function override() {\n            this.consoleError = console.error;\n\n            // need to bind because somehow when _log() is called this refers to console\n            console.error = this._log.bind(this);\n        }\n    }, {\n        key: 'restore',\n        value: function restore() {\n            console.error = this.consoleError;\n        }\n    }, {\n        key: 'playback',\n        value: function playback() {\n            console.log(this.logs.join(' '));\n        }\n    }]);\n\n    return PackagerConsole;\n}();\n\nexports.default = PackagerConsole;\n//# sourceMappingURL=packagerConsole.js.map\n","/home/travis/build/npmtest/node-npmtest-nativefier/node_modules/nativefier/lib/build/buildApp.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _crypto = require('crypto');\n\nvar _crypto2 = _interopRequireDefault(_crypto);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _ncp = require('ncp');\n\nvar _ncp2 = _interopRequireDefault(_ncp);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar copy = _ncp2.default.ncp;\n\n/**\n * Creates a temporary directory and copies the './app folder' inside, and adds a text file with the configuration\n * for the single page app.\n *\n * @param {string} src\n * @param {string} dest\n * @param {{}} options\n * @param callback\n */\nfunction buildApp(src, dest, options, callback) {\n    var appArgs = selectAppArgs(options);\n    copy(src, dest, function (error) {\n        if (error) {\n            callback('Error Copying temporary directory: ' + error);\n            return;\n        }\n\n        _fs2.default.writeFileSync(_path2.default.join(dest, '/nativefier.json'), JSON.stringify(appArgs));\n\n        maybeCopyScripts(options.inject, dest).catch(function (error) {\n            console.warn(error);\n        }).then(function () {\n            changeAppPackageJsonName(dest, appArgs.name, appArgs.targetUrl);\n            callback();\n        });\n    });\n}\n\nfunction maybeCopyScripts(srcs, dest) {\n    if (!srcs) {\n        return new Promise(function (resolve) {\n            resolve();\n        });\n    }\n    var promises = srcs.map(function (src) {\n        return new Promise(function (resolve, reject) {\n            if (!_fs2.default.existsSync(src)) {\n                reject('Error copying injection files: file not found');\n                return;\n            }\n\n            var destFileName = void 0;\n            if (_path2.default.extname(src) === '.js') {\n                destFileName = 'inject.js';\n            } else if (_path2.default.extname(src) === '.css') {\n                destFileName = 'inject.css';\n            } else {\n                resolve();\n                return;\n            }\n\n            copy(src, _path2.default.join(dest, 'inject', destFileName), function (error) {\n                if (error) {\n                    reject('Error Copying injection files: ' + error);\n                    return;\n                }\n                resolve();\n            });\n        });\n    });\n\n    return new Promise(function (resolve, reject) {\n        Promise.all(promises).then(function () {\n            resolve();\n        }).catch(function (error) {\n            reject(error);\n        });\n    });\n}\n\nfunction changeAppPackageJsonName(appPath, name, url) {\n    var packageJsonPath = _path2.default.join(appPath, '/package.json');\n    var packageJson = JSON.parse(_fs2.default.readFileSync(packageJsonPath));\n    packageJson.name = normalizeAppName(name, url);\n    _fs2.default.writeFileSync(packageJsonPath, JSON.stringify(packageJson));\n}\n\n/**\n * Only picks certain app args to pass to nativefier.json\n * @param options\n * @returns {{name: (*|string), targetUrl: (string|*), counter: *, width: *, height: *, showMenuBar: *, userAgent: *, nativefierVersion: *, insecure: *, disableWebSecurity: *}}\n */\nfunction selectAppArgs(options) {\n    return {\n        name: options.name,\n        targetUrl: options.targetUrl,\n        counter: options.counter,\n        width: options.width,\n        height: options.height,\n        minWidth: options.minWidth,\n        minHeight: options.minHeight,\n        maxWidth: options.maxWidth,\n        maxHeight: options.maxHeight,\n        showMenuBar: options.showMenuBar,\n        fastQuit: options.fastQuit,\n        userAgent: options.userAgent,\n        nativefierVersion: options.nativefierVersion,\n        ignoreCertificate: options.ignoreCertificate,\n        insecure: options.insecure,\n        flashPluginDir: options.flashPluginDir,\n        fullScreen: options.fullScreen,\n        hideWindowFrame: options.hideWindowFrame,\n        maximize: options.maximize,\n        disableContextMenu: options.disableContextMenu,\n        disableDevTools: options.disableDevTools,\n        zoom: options.zoom,\n        internalUrls: options.internalUrls,\n        crashReporter: options.crashReporter\n    };\n}\n\nfunction normalizeAppName(appName, url) {\n    // use a simple 3 byte random string to prevent collision\n    var hash = _crypto2.default.createHash('md5');\n    hash.update(url);\n    var postFixHash = hash.digest('hex').substring(0, 6);\n    var normalized = _lodash2.default.kebabCase(appName.toLowerCase());\n    return normalized + '-nativefier-' + postFixHash;\n}\n\nexports.default = buildApp;\n//# sourceMappingURL=buildApp.js.map\n"}